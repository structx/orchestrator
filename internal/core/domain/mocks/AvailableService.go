// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/orchestrator/internal/core/domain"
)

// AvailableService is an autogenerated mock type for the AvailableService type
type AvailableService struct {
	mock.Mock
}

type AvailableService_Expecter struct {
	mock *mock.Mock
}

func (_m *AvailableService) EXPECT() *AvailableService_Expecter {
	return &AvailableService_Expecter{mock: &_m.Mock}
}

// ListRegions provides a mock function with given fields: ctx
func (_m *AvailableService) ListRegions(ctx context.Context) ([]domain.Region, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRegions")
	}

	var r0 []domain.Region
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Region, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Region); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Region)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AvailableService_ListRegions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRegions'
type AvailableService_ListRegions_Call struct {
	*mock.Call
}

// ListRegions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AvailableService_Expecter) ListRegions(ctx interface{}) *AvailableService_ListRegions_Call {
	return &AvailableService_ListRegions_Call{Call: _e.mock.On("ListRegions", ctx)}
}

func (_c *AvailableService_ListRegions_Call) Run(run func(ctx context.Context)) *AvailableService_ListRegions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AvailableService_ListRegions_Call) Return(_a0 []domain.Region, _a1 error) *AvailableService_ListRegions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AvailableService_ListRegions_Call) RunAndReturn(run func(context.Context) ([]domain.Region, error)) *AvailableService_ListRegions_Call {
	_c.Call.Return(run)
	return _c
}

// NewAvailableService creates a new instance of AvailableService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAvailableService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AvailableService {
	mock := &AvailableService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
