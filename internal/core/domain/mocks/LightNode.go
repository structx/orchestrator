// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/orchestrator/internal/core/domain"
)

// LightNode is an autogenerated mock type for the LightNode type
type LightNode struct {
	mock.Mock
}

type LightNode_Expecter struct {
	mock *mock.Mock
}

func (_m *LightNode) EXPECT() *LightNode_Expecter {
	return &LightNode_Expecter{mock: &_m.Mock}
}

// CheckAvailability provides a mock function with given fields: _a0, _a1
func (_m *LightNode) CheckAvailability(_a0 context.Context, _a1 domain.AvailableParams) (domain.Available, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailability")
	}

	var r0 domain.Available
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AvailableParams) (domain.Available, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.AvailableParams) domain.Available); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Available)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.AvailableParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LightNode_CheckAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAvailability'
type LightNode_CheckAvailability_Call struct {
	*mock.Call
}

// CheckAvailability is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.AvailableParams
func (_e *LightNode_Expecter) CheckAvailability(_a0 interface{}, _a1 interface{}) *LightNode_CheckAvailability_Call {
	return &LightNode_CheckAvailability_Call{Call: _e.mock.On("CheckAvailability", _a0, _a1)}
}

func (_c *LightNode_CheckAvailability_Call) Run(run func(_a0 context.Context, _a1 domain.AvailableParams)) *LightNode_CheckAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.AvailableParams))
	})
	return _c
}

func (_c *LightNode_CheckAvailability_Call) Return(_a0 domain.Available, _a1 error) *LightNode_CheckAvailability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LightNode_CheckAvailability_Call) RunAndReturn(run func(context.Context, domain.AvailableParams) (domain.Available, error)) *LightNode_CheckAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// NewLightNode creates a new instance of LightNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLightNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *LightNode {
	mock := &LightNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
